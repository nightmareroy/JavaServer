// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: packet2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Test {

  /// <summary>Holder for reflection information generated from packet2.proto</summary>
  public static partial class Packet2Reflection {

    #region Descriptor
    /// <summary>File descriptor for packet2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Packet2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1wYWNrZXQyLnByb3RvEgR0ZXN0Ggxjb21tb24ucHJvdG8iHgoMVGVzdDJS",
            "ZXF1ZXN0Eg4KBnRlc3RJZBgBIAEoBSI7Cg1UZXN0MlJlc3BvbnNlEioKDnRl",
            "c3RDb21tb25Ob2RlGAEgASgLMhIuY29tbW9uLkNvbW1vbk5vZGUyQgoMVGVz",
            "dDJTZXJ2aWNlEjIKB1Rlc3QyMjISEi50ZXN0LlRlc3QyUmVxdWVzdBoTLnRl",
            "c3QuVGVzdDJSZXNwb25zZUIDiAEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Test.Test2Request), global::Test.Test2Request.Parser, new[]{ "TestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Test.Test2Response), global::Test.Test2Response.Parser, new[]{ "TestCommonNode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Test2Request : pb::IMessage<Test2Request> {
    private static readonly pb::MessageParser<Test2Request> _parser = new pb::MessageParser<Test2Request>(() => new Test2Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test2Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Test.Packet2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test2Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test2Request(Test2Request other) : this() {
      testId_ = other.testId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test2Request Clone() {
      return new Test2Request(this);
    }

    /// <summary>Field number for the "testId" field.</summary>
    public const int TestIdFieldNumber = 1;
    private int testId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestId {
      get { return testId_; }
      set {
        testId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test2Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test2Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TestId != other.TestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TestId != 0) hash ^= TestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TestId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test2Request other) {
      if (other == null) {
        return;
      }
      if (other.TestId != 0) {
        TestId = other.TestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TestId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Test2Response : pb::IMessage<Test2Response> {
    private static readonly pb::MessageParser<Test2Response> _parser = new pb::MessageParser<Test2Response>(() => new Test2Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test2Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Test.Packet2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test2Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test2Response(Test2Response other) : this() {
      TestCommonNode = other.testCommonNode_ != null ? other.TestCommonNode.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test2Response Clone() {
      return new Test2Response(this);
    }

    /// <summary>Field number for the "testCommonNode" field.</summary>
    public const int TestCommonNodeFieldNumber = 1;
    private global::Common.CommonNode testCommonNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.CommonNode TestCommonNode {
      get { return testCommonNode_; }
      set {
        testCommonNode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test2Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test2Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TestCommonNode, other.TestCommonNode)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (testCommonNode_ != null) hash ^= TestCommonNode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (testCommonNode_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TestCommonNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (testCommonNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestCommonNode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test2Response other) {
      if (other == null) {
        return;
      }
      if (other.testCommonNode_ != null) {
        if (testCommonNode_ == null) {
          testCommonNode_ = new global::Common.CommonNode();
        }
        TestCommonNode.MergeFrom(other.TestCommonNode);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (testCommonNode_ == null) {
              testCommonNode_ = new global::Common.CommonNode();
            }
            input.ReadMessage(testCommonNode_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
